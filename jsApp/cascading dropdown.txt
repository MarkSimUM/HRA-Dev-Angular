<div ng-app="myApp">
<div ng-controller="testController">
        <select
            name="client"
            ng-model="selectedRequest.client"
            ng-options="c.name
                        for c in clients" required>
        </select>
        <select
           id="department"
           ng-model="selectedRequest.department"
            ng-options="d.defaultLabel
                        for d in selectedRequest.client.departments">
        </select>
    </div>
</div>

   angular.module("myApp", []);
  function testController($scope) {
              $scope.clients = [
               { id: 1, name: "client1", departments: [{ id: 1, defaultLabel: 'department1' }, { id: 2, defaultLabel: 'department2'}] },
               { id: 2, name: "client2", departments: [{ id: 3, defaultLabel: 'department3' }, { id: 4, defaultLabel: 'department4'}] }
              ];

               $scope.selectedRequest = {};
               $scope.selectedRequest.client = $scope.clients[0];
          }

 **** using 2 methods:   ng-options VERSUS ng-repeat in <option>
 **** the "anotherLocationId" model will fill drop-down, but not initialize when $scope.anotherLocationID is set

 <div ng-app="myApp">
     <div ng-controller="TheController" ng-app>

 Location:
  //NOTE: ng-options -> item is local variable from data in LOCATIONS
 <select
         ng-model="locationId"
         ng-options="item.LocationId as item.LocationName
         for item in locations">

  </select>

     <p/>

 Another Location:
 <select ng-model="anotherLocationId">
     <option
            ng-repeat="location in locations"
             value="{{location.LocationId}}">
             {{location.LocationName}}
      </option>
 </select>

     <hr/>

     Location: {{locationId}} <br/>
     Another Location: {{anotherLocationId}}


 </div>

  myApp = angular.module('myApp', []);

  function TheController($scope) {

      $scope.locations = [
          {LocationId : 7, LocationName : 'Philippines' },
          {LocationId : 8, LocationName : 'Canada' },
          {LocationId : 9, LocationName : 'China' } ];

      $scope.locationId = 9;
      $scope.anotherLocationId = 8;    // DOESN'T INITIALIZE!
  };


<select
       ng-model="{string}"
       [name="{string}"]
       [required]
       [ng-required="{string}"]
       [ng-options="{comprehension_expression}"]>
</select>
*** ng-options -->
in one of the following forms:

*for array data sources:
label for value in array
select as label for value in array
label group by group for value in array
select as label group by group for value in array track by trackexpr

*for object data sources:
label for (key , value) in object
select as label for (key , value) in object
label group by group or (key, value) in object
select as label group by group for (key, value) in object

***** EXAMPLE
http://plnkr.co/edit/Ylq5l4IUBQqrr6xysPVk?p=preview
 Color (null not allowed):
  <select ng-model="color" ng-options="c.name for c in colors"></select><br>

  Color (null allowed):
  <span  class="nullable">
    <select ng-model="color" ng-options="c.name for c in colors">
      <option value="">-- choose color --</option>
    </select>
  </span><br/>

  Color grouped by shade:
  <select ng-model="color" ng-options="c.name group by c.shade for c in colors">
  </select><br/>


  Select <a href ng-click="color={name:'not in list'}">bogus</a>.<br>
  <hr/>
  Currently selected: {{ {selected_color:color}  }}
  <div style="border:solid 1px black; height:20px"
       ng-style="{'background-color':color.name}">
  </div>
</div>



<div ng-controller="MyCtrl">
  <select ng-model="user"

  ng-options="user.id as user.email for user in object_array " ></select>
<br>user id: {{user.id}}
<br>user mail: {{user.email}}
<br>user: {{user}}
<br>object_arrary: {{object_array}}
</div>
     Another Location:
 <select ng-model="anotherLocationId">
     <option
            ng-repeat="user1 in object_array"
             value="{{user1.id}}">
             {{user1.id}}

      </option>
 </select>
    var myApp = angular.module('myApp',[]);

    function MyCtrl($scope) {

       // $scope.user = {id: 2, email: "c@d.com" };

        $scope.object_array = [{ id: 1, email: "a@b.com" }, { id: 2, email: "c@d.com" }];
       $scope.user= $scope.object_array[1];

    }

